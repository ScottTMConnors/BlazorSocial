@page "/post/{Id}"

@rendermode InteractiveServer

@using System.Diagnostics;
@using Microsoft.AspNetCore.Authorization
@using Data;
@using Data.Entities;
@using Data.ComponentObjects;
@using Microsoft.Data.SqlClient
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity

@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ContentDbContext DbContext
@inject IDbContextFactory<ContentDbContext> dbContextFactory
@inject SignInManager<ApplicationUser> SignInManager

<div class="post-card">
    <h1>@_currentPost.Title</h1>
    <br/>
    <p>@((MarkupString)_currentPost.Content)</p>
    <br />
    <p>@_currentPost.PostDate</p>
    <br />
    <p>Views: @_currentPost.PostMetadata.ViewCount</p>
    <br />
    <div>
        @if (authenticated) {
            <button style="outline: none !important;"  class="votebutton @(((voteObject.IsUpvote) && (voteObject.IsActive)) ? "text-warning" : "text-secondary")" @onclick="Upvote">
                <i class="bi bi-arrow-up"></i>
            </button>

            <button style="outline: none !important;" class="votebutton @((!(voteObject.IsUpvote) && (voteObject.IsActive)) ? "text-purple" : "text-secondary")" @onclick="Downvote">
                <i class="bi bi-arrow-down"></i>
            </button>
        }
        <p>Score: @_currentPost.PostMetadata.NetVotes | Upvotes: @_currentPost.PostMetadata.Upvotes | Downvotes: @_currentPost.PostMetadata.Downvotes </p>
    </div>
</div>

<br />

<Virtualize Context="comment" ItemsProvider="@LoadComments" ItemSize="100" OverscanCount="1">
    <ItemContent>
        <div class="comment-card">
            <p>@comment.Author.UserName</p>
            <p>@ConvertDateToString(comment.PostDate)</p>
            <div class="">
                <p>@((MarkupString)comment.Content)</p>
            </div>
        </div>
    </ItemContent>
</Virtualize>

@code {

    [Parameter]
    public string Id { get; set; }

    private bool authenticated = false;

    private Post? _currentPost;

    private string? userId;

    private Vote? voteObject;

    //private SocialUser? user;


    protected override async Task OnInitializedAsync() {

        if (Id == null || Id == "") {
            NavigationManager.NavigateTo("/ViewPosts");
        }

        //Get the post object associated with this id
        GetPost();

        if (_currentPost == null) {
            NavigationManager.NavigateTo("/ViewPosts");
        }

    }

    private async ValueTask<ItemsProviderResult<Comment>> LoadComments(ItemsProviderRequest request) {
        using var dbContext = dbContextFactory.CreateDbContext();

        // Load the requested posts from the database
        var newComments = await dbContext.Comments
            .Include(comment => comment.Author)
            .Where(comment => comment.PostId == _currentPost.Id)
            .Select(comment => new Comment {
                Id = comment.Id,
                Content = comment.Content,
                PostDate = comment.PostDate,
                Author = comment.Author
            })
            .OrderByDescending(comment => comment.PostDate)
            .Skip(request.StartIndex)
            .Take(request.Count)
            .ToListAsync();

        int dynamicTotalCount;
        if (newComments.Count() < request.Count) {
            dynamicTotalCount = request.StartIndex + newComments.Count();
        } else {
            dynamicTotalCount = request.StartIndex + newComments.Count() + 10; // buffer for more posts
        }

        return new ItemsProviderResult<Comment>(newComments, dynamicTotalCount);
    }

    private void GetPost(){
        _currentPost = DbContext.Posts.Where(post => post.Id == Id).Select(post => new ViewPostObject {
            Id = post.Id,
            Title = post.Title,
            Content = post.Content.Substring(0, 1000),
            PostDate = post.PostDate,
            DateString = ConvertDateToString(post.PostDate),
            AuthorID = post.AuthorID,
            AuthorName = "",
            PostMetadata = post.PostMetadata
        }).FirstOrDefault();
    }

    private void GetPostMetaData() {
        _currentPost.PostMetadata = DbContext.PostMetadatas.Where(p => p.PostId == Id).FirstOrDefault();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            //Get the user requesting to determine if they can interact with the post
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var AuthUser = authState.User;

            string sql = "";

            if (AuthUser.Identity.IsAuthenticated) {
                authenticated = true;
                userId = AuthUser.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                //user = DbContext.SocialUsers.Where(user => user.UserId == userId).FirstOrDefault();

                var UserView = DbContext.Views.Where(view => (view.UserId == userId) && (view.PostId == _currentPost.Id)).FirstOrDefault();
                if (UserView == null) {
                    sql = "UPDATE PostMetadatas SET ViewCount = ISNULL(ViewCount, 0) + 1 WHERE PostId = @postId";
                    await DbContext.Database.ExecuteSqlRawAsync(sql, new SqlParameter("@postId", _currentPost.Id));
                    _currentPost.PostMetadata.ViewCount += 1;
                    // Create a new view record and update viewcount
                    View newView = new View {
                        PostId = _currentPost.Id,
                        UserId = userId,
                        ViewDate = DateTime.Now,
                        TimesViewed = 1
                    };
                    DbContext.Views.Add(newView);
                    await DbContext.SaveChangesAsync();
                } else {
                    // Update the timesviewed field for the view
                }

                voteObject = DbContext.Votes.Where(vote => (vote.UserId == userId) && (vote.PostId == _currentPost.Id)).FirstOrDefault() ?? new Vote {UserId = userId, PostId = _currentPost.Id};
            } else {

                string ipAddress = HttpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString();

                // create do a view lookup for this ip
                var AnonView = DbContext.AnonViews.Where(view => (view.IPAddress == ipAddress) && (view.PostId == _currentPost.Id)).FirstOrDefault();

                if (AnonView == null) {
                    // Create a new view record and update viewcount
                    sql = "UPDATE PostMetadatas SET AnonViewCount = ISNULL(AnonViewCount, 0) + 1 WHERE PostId = @postId";
                    DbContext.Database.ExecuteSqlRawAsync(sql, new SqlParameter("@postId", _currentPost.Id));
                    _currentPost.PostMetadata.AnonViewCount += 1;
                    AnonView newAnonView = new AnonView {
                        PostId = _currentPost.Id,
                        IPAddress = ipAddress,
                        ViewDate = DateTime.Now,
                        TimesViewed = 1
                    };
                    DbContext.AnonViews.Add(newAnonView);
                    await DbContext.SaveChangesAsync();
                } else {
                    // Update the timesviewed field for the view
                }

            }

            StateHasChanged();
        }
    }

    public static string ConvertDateToString(DateTime? date) {
        if (!date.HasValue) {
            return "Invalid date";
        }

        TimeSpan difference = DateTime.Now - date.Value;

        if (difference.TotalDays >= 1) {
            return date.Value.ToString();
        } else if (difference.TotalHours >= 1) {
            return $"{(int)difference.TotalHours}h";
        } else if (difference.TotalMinutes >= 1) {
            return $"{(int)difference.TotalMinutes}m";
        } else {
            return $"{(int)difference.TotalSeconds}s";
        }
    }

    private void Upvote() {
        UpdateVote(true);
    }

    private void Downvote() {
        UpdateVote(false);
    }

    private void UpdateVote(bool voteType) {
        // Get the latest metadata
        GetPostMetaData();

        if (voteObject.IsUpvote == voteType && voteObject.IsActive) {
            voteObject.IsActive = false;
            if (voteType) {
                _currentPost.PostMetadata.Upvotes += -1;
                _currentPost.PostMetadata.NetVotes += -1;
            } else {
                _currentPost.PostMetadata.Downvotes += -1;
                _currentPost.PostMetadata.NetVotes += 1;
            }
        } else {
            if (voteType) {
                _currentPost.PostMetadata.Upvotes += 1;
                _currentPost.PostMetadata.NetVotes += 1;
                if (voteObject.IsActive) {
                    _currentPost.PostMetadata.Downvotes += -1;
                    _currentPost.PostMetadata.NetVotes += 1;
                }
            } else {
                _currentPost.PostMetadata.Downvotes += 1;
                _currentPost.PostMetadata.NetVotes += -1;
                if (voteObject.IsActive) {
                    _currentPost.PostMetadata.Upvotes += -1;
                    _currentPost.PostMetadata.NetVotes += -1;
                }
            }
            voteObject.IsActive = true;
            voteObject.IsUpvote = voteType;
        }
        // Implement your logic here

        _ = DbContext.Votes.Any(v => v.PostId == _currentPost.Id && v.UserId == userId) ? DbContext.Votes.Update(voteObject) : DbContext.Votes.Add(voteObject);
        DbContext.SaveChangesAsync();
        Debug.WriteLine($"User has {voteType}d.");
        StateHasChanged();
    }

}

<style>
    .text-purple {
        color: purple;
    }

    .votebutton:focus {
        outline: none !important;
    }

    .votebutton {
        padding: 10px;
        border: none;
        background: none;
    }

    .post-card {
        border: 1px solid #d0d0d0;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        margin: auto;
        margin-bottom: 20px;
        padding: 15px;
        border-radius: 10px;
        background-color: white;
        display: flex;
        flex-direction: column;
    }

    .comment-card {
        border: 1px solid #d0d0d0;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        margin: auto;
        margin-bottom: 20px;
        padding: 15px;
        border-radius: 10px;
        background-color: white;

/*         overflow: hidden; /* Hide content that overflows */ */
        display: flex;
        flex-direction: column;
    }

</style>