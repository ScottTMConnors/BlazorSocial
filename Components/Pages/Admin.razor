@page "/Admin"

@rendermode @(new InteractiveServerRenderMode(prerender: false))


@using Microsoft.AspNetCore.Authorization
@using Data;
@using Data.Entities
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using EFCore.BulkExtensions
@using System.Diagnostics
@using System.Collections.Concurrent
@using NameGenerator.Generators

@inject ContentDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject IDbContextFactory<ContentDbContext> dbContextFactory

@attribute [Authorize]


<h1>Admin</h1>

<p role="status">Server Message: @message</p>

<br />
<p># of posts in db</p>
<p>@PostCount</p>
<br />

<h3>Generate Random Posts</h3>
<br />
<p>Specify # of users</p>
<input type="number" @bind="numberOfUsers" />
<br />
<p>Specify # of posts</p>
<input type="number" @bind="numberOfPosts" />
<br />
<p>Max phrases ({subject} {verb} {objectPhrase})</p>
<p>Title:</p>
<input type="number" @bind="maxTitle" />
<p>Content:</p>
<input type="number" @bind="maxContent" />
<br />
<br />
<button class="btn btn-primary" @onclick="GenerateData">Generate</button>
<br />
<br />
<h3>Delete All Posts</h3>
<br />
<button class="btn btn-primary" @onclick="DeletePosts">Delete</button>

@code {
    private string message = "";

    private int numberOfPosts = 100;
    private int maxTitle = 1;
    private int maxContent = 100;

    private int numberOfUsers = 100;

    public int PostCount { get; private set; }

    private DateTime endDate = DateTime.Now;

    private static readonly object _lockObject = new object();
    private List<Post>? PostList;

    private List<SocialUser>? UserList;

    private ConcurrentBag<PostMetadata>? PostMetaList = new ConcurrentBag<PostMetadata>();

    private ConcurrentBag<View> ViewList = new ConcurrentBag<View>();

    private ConcurrentBag<Vote> VoteList = new ConcurrentBag<Vote>();

    private class interactionObject {
        public IEnumerable<View> Views { get; set; }
        public IEnumerable<Vote> Votes { get; set; }
    }


    protected override void OnInitialized() {
        using var dbContext = dbContextFactory.CreateDbContext();
        PostCount = dbContext.Posts.Count();
        StateHasChanged();
        dbContext.DisposeAsync();
    }


    protected async Task GenerateData() {


        using var dbContext = dbContextFactory.CreateDbContext();
        PostCount = dbContext.Posts.Count();

        StateHasChanged();

        // Generate random users
        UserList = GenerateUsers().ToList();

        //Generate random posts
        PostList = GeneratePosts().ToList();


        // Generate User/Post views and votes


        Debug.WriteLine("Inserting into db");
        await dbContext.BulkInsertAsync(UserList);
        await dbContext.BulkInsertAsync(PostList);
        await dbContext.BulkInsertAsync(PostMetaList);
        await dbContext.BulkInsertAsync(ViewList);
        await dbContext.BulkInsertAsync(VoteList);
        // DbContext.Posts.AddRange(GeneratedPosts);
        // await DbContext.SaveChangesAsync();
        message = $"{numberOfPosts} Random Posts Successful";
        Debug.WriteLine($"{numberOfPosts} Random Posts Successful");
        PostCount = dbContext.Posts.Count();
        StateHasChanged();
        dbContext.DisposeAsync();
        PostList.Clear();
        UserList.Clear();
        GC.Collect();
    }

    private IEnumerable<SocialUser> GenerateUsers() {
        ConcurrentBag<SocialUser> GeneratedUsers = new ConcurrentBag<SocialUser>();
        Parallel.For(0, numberOfUsers, i => {
            Random random = new Random();
            RealNameGenerator generator = new RealNameGenerator();
            generator.SpaceCharacter = "";
            string userNumber = string.Format("{0:00}", random.Next(99));
            string username = generator.Generate();
            username = string.Concat(username, userNumber);
            string userId = Guid.NewGuid().ToString();
            // Assemble the content user object
            SocialUser generatedUser = new SocialUser {
                UserId = userId,
                UserName = username,
                NormalizedUserName = username.ToUpper()
            };
            GeneratedUsers.Add(generatedUser);
        });

        return GeneratedUsers;
    }

    private IEnumerable<Post> GeneratePosts() {
        message = $"Generating {numberOfPosts} posts";
        Debug.WriteLine($"Generating {numberOfPosts} posts");

        ConcurrentBag<Post> GeneratedPosts = new ConcurrentBag<Post>();

        Parallel.For(0, numberOfPosts, async i => {
            //for (int i = 0; i < 100000; i++) {
            // Generate a random title and content
            Random random = new Random();

            var randomTitletask = GenerateRandomSentence(random, 1, maxTitle); // Assuming title length between 10 and 20 characters
            var randomContenttask = GenerateRandomSentence(random, 3, maxContent); // Content length between 5 and 100 characters
            DateTime startDate = new DateTime(2020, 1, 1);
            string userId = UserList[random.Next(UserList.Count)].UserId;
            string postId = Guid.NewGuid().ToString("N");

            int range = ((endDate - startDate).Days + 1);
            DateTime randomDate = startDate.AddDays(random.Next(range)).AddHours(random.Next(DateTime.Now.Hour)).AddMinutes(random.Next(DateTime.Now.Minute)).AddSeconds(random.Next(DateTime.Now.Second));


            Post newPost = new Post {
                Id = postId,
                PostDate = randomDate
            };

            var viewvoteTask = GenerateViewsandVotes(newPost);



            await Task.WhenAll(randomTitletask, randomContenttask, viewvoteTask);

            //Build Title
            string randomTitle = randomTitletask.Result;
            newPost.Title = randomTitle;

            //Content
            string randomContent = randomContenttask.Result;
            newPost.Content = randomContent;





            GeneratedPosts.Add(newPost);

            //Create the metadata object

            PostMetadata newMetadate = new PostMetadata {
                PostId = postId
            };

            PostMetaList.Add(newMetadate);
        });

        return GeneratedPosts;
    }

    private async Task GenerateViewsandVotes(Post post) {

        ICollection<string> UserIdsInteracted = new List<string>();
        // Get a random number of users to interact with this post
        Random random = new Random();
        int numofInteractions = random.Next(1, (numberOfUsers / random.Next(2,5)));
        // For ever number of users, pick a user that is not the post user and hasnt interacted with this post yet (Will probably be resource intensive)
        int userCount = UserList.Count();
        UserIdsInteracted.Add(post.AuthorID);
        int listCount = 1; //Start at 1 to account for the post author
        for (int i = 0; i <= numofInteractions; i++) {
            // Pick a random user in the userlist
            string userId = UserList
                .Where(u => !UserIdsInteracted.Any(u2 => u2 == u.UserId))
                .ElementAt(random.Next((userCount - listCount) - 1))
                .UserId;
            UserIdsInteracted.Add(userId);
            listCount++;
            // Create a view object using the userId and the postId

            // Create a random view date

            DateTime startDate = post.PostDate ?? DateTime.Now;
            int range = ((endDate - startDate).Days + 1);
            DateTime randomDate = startDate.AddDays(random.Next(range)).AddHours(random.Next(DateTime.Now.Hour)).AddMinutes(random.Next(DateTime.Now.Minute)).AddSeconds(random.Next(DateTime.Now.Second));


            View GeneratedView = new View {
                PostId = post.Id,
                UserId = userId,
                ViewDate = randomDate,
                TimesViewed = random.Next(1,7)
            };
            ViewList.Add(GeneratedView);

            // Randomly determine if a vote will be made

            if (random.Next() > (Int32.MaxValue / 2)) {
                // Create a vote objecte
                bool upVote = false;
                randomDate = startDate.AddDays(random.Next(range)).AddHours(random.Next(DateTime.Now.Hour)).AddMinutes(random.Next(DateTime.Now.Minute)).AddSeconds(random.Next(DateTime.Now.Second));

                //Randomly determine if will be an upvote of downvote
                if (random.Next() > (Int32.MaxValue / 2)) {
                    upVote = true;
                }
                Vote GeneratedVote = new Vote {
                    PostId = post.Id,
                    UserId = userId,
                    IsUpvote = upVote,
                    VoteDate = randomDate,
                    IsActive = true //Redundant because this field initializes to true
                };

                VoteList.Add(GeneratedVote);

            }



            // TODO, add comments
        }
    }

    private async Task<string> GenerateRandomSentence(Random random, int minPhrases, int maxLength) {
        string[] connectors = {
            "and", "but", "or", "so", "because",
            "although", "however", "therefore", "meanwhile", "consequently",
            "furthermore", "moreover", "thus", "nonetheless", "besides",
            "otherwise", "then", "accordingly", "hence", "instead",
            "whereas", "despite", "as long as", "unless", "even though"
    };

        string[] subjects = {
            "alice", "the cat", "our team", "the weather", "this recipe",
            "john", "the dog", "the company", "the book", "the movie",
            "jim", "the teacher", "the student", "the car", "the game",
            "the musician", "the artist", "the city", "the computer", "the phone",
            "the chef", "the gardener", "the runner", "the dancer", "the writer",
            "the bird", "the fish", "the planet", "the sun", "the moon",
            "the athlete", "the scientist", "the doctor", "the engineer", "the pilot",
            "the president", "the king", "the queen", "the prince", "the princess",
            "the actor", "the director", "the photographer", "the baby", "the child",
            "the adult", "the teenager", "the elder", "the robot", "the alien",
            "the ghost", "the monster", "the dragon", "the knight", "the wizard",
            "the chef", "the baker", "the farmer", "the sailor", "the fisherman",
            "the teacher", "the policeman", "the firefighter", "the nurse", "the dentist",
            "the lawyer", "the judge", "the librarian", "the journalist", "the editor",
            "the driver", "the pilot", "the astronaut", "the scientist", "the archaeologist",
            "the explorer", "the trader", "the banker", "the clerk", "the manager",
            "the ceo", "the intern", "the volunteer", "the activist", "the artist",
            "the singer", "the guitarist", "the pianist", "the drummer", "the actor",
            "the magician", "the comedian", "the speaker", "the author", "the poet"
    };

        string[] objects = {
            "Bob", "over the moon", "day by day", "in summer", "delicious",
            "a mystery", "a story", "a song", "a movie", "a game",
            "a puzzle", "a painting", "a sculpture", "a photograph", "a garden",
            "a forest", "a mountain", "a river", "a sea", "an ocean",
            "a beach", "a city", "a village", "a country", "a planet",
            "a star", "a galaxy", "the universe", "history", "the future",
            "a dream", "a nightmare", "a legend", "a myth", "a fairy tale",
            "a poem", "a novel", "a play", "a dance", "a melody",
            "a rhythm", "a harmony", "a tune", "a beat", "a chord",
            "a joke", "a laugh", "a smile", "a tear", "a look",
            "a glance", "a wink", "a nod", "a gesture", "a step",
            "a leap", "a jump", "a run", "a walk", "a hike",
            "a trip", "a journey", "an adventure", "a quest", "a challenge",
            "a test", "an exam", "a lesson", "a lecture", "a seminar",
            "a workshop", "a conference", "a meeting", "a conversation", "a discussion",
            "a debate", "an argument", "a fight", "a battle", "a war",
            "peace", "a treaty", "a deal", "a contract", "an agreement",
            "a promise", "a vow", "a pledge", "a oath", "a commitment"
    };


        string[] phraseTemplates = new string[] {
            "{0} {1} {2}",
            "{0} {1} {2} and then {1} {2}",
            "{0} {1} {2} but {3} {4} {5}",
            "{0} {1} {2} while {3} {4} {5}",
            "{0} {1} {2} because {3} {4} {5}",
            "{0} {1} {2}, {6} {3} {4} {5}",
            "{0} {1} {2}, {6} {1} {5}",
            "{0} {1} {2}, {6} {4} {5}",
            "{0} {1} {2}, {6} the latter {4} {5}",
            "{0} {1} {2}, {6} suddenly {1} {2}",
            "{0} {1} {2}, {6} eventually {4} {5}",
            "{0} {1} {2} as if {3} {4} {5}",
            "{0} {1} {2}, {6} then {3} {4} {5}",
            "{0} {1} {2}, {6} hence {3} {4} {5}",
            "{0} {1} {2}, {6} thus {1} {5}",
            "{0} {1} {2}, {6} meanwhile {4} {2}",
            "{0} {1} {2}, {6} moreover {3} {4} {5}",
            "{0} {1} {2}, {6} furthermore {1} {5}",
            "{0} {1} {2}, {6} however {3} {4} {5}",
            "{0} {1} {2}, {6} alternatively {4} {2}",
            "{0} {1} {2}, {6} conversely {1} {5}",
            "{0} {1} {2}, {6} on the other hand {3} {4} {5}",
            "{0} {1} {2} despite {3} {4} {5}",
            "{0} {1} {2} yet {3} {4} {5}",
            "{0} {1} {2} albeit {3} {4} {5}",
            "{0} {1} {2}, {6} notwithstanding {3} {4} {5}",
            "{0} {1} {2}, {6} whereas {1} {5}",
            "{0} {1} {2}, {6} though {4} {2}",
            "{0} {1} {2}, {6} even though {3} {4} {5}",
            "{0} {1} {2}, {6} even if {1} {5}",
            "{0} {1} {2} unless {3} {4} {5}",
            "{0} {1} {2}, {6} provided that {4} {2}",
            "{0} {1} {2}, {6} as long as {3} {4} {5}",
            "{0} {1} {2}, {6} so long as {1} {5}",
            "{0} {1} {2} in case {3} {4} {5}",
            "{0} {1} {2}, {6} as though {4} {2}",
            "{0} {1} {2}, {6} as much as {3} {4} {5}",
            "{0} {1} {2}, {6} as soon as {1} {5}",
            "{0} {1} {2}, {6} insofar as {3} {4} {5}",
            "{0} {1} {2}, {6} inasmuch as {4} {2}",
            "{0} {1} {2}, {6} just as {3} {4} {5}",
            "{0} {1} {2}, {6} just as soon as {1} {5}",
            "{0} {1} {2}, {6} just because {3} {4} {5}",
            "{0} {1} {2}, {6} since {4} {2}",
            "{0} {1} {2}, {6} now that {3} {4} {5}",
            "{0} {1} {2}, {6} once {1} {5}",
            "{0} {1} {2}, {6} whenever {3} {4} {5}",
            "{0} {1} {2}, {6} wherever {4} {2}",
            "{0} {1} {2}, {6} while {3} {4} {5}",
            "{0} {1} {2}, {6} till {1} {5}",
            "{0} {1} {2}, {6} until {3} {4} {5}",
            "{0} {1} {2}, {6} after {4} {2}",
            "{0} {1} {2}, {6} before {3} {4} {5}",
            "{0} {1} {2}, {6} by the time {1} {5}",
            "{0} {1} {2}, {6} by then {3} {4} {5}",
            "{0} {1} {2}, {6} by when {4} {2}",
            "{0} {1} {2}, {6} as {3} {4} {5}",
            "{0} {1} {2}, {6} like {1} {5}",
            "{0} {1} {2}, {6} unlike {3} {4} {5}",
            "{0} {1} {2}, {6} similar to {4} {2}",
            "{0} {1} {2}, {6} as if {3} {4} {5}",
            "{0} {1} {2}, {6} as though {1} {5}",
            "{0} {1} {2}, {6} in the way that {3} {4} {5}",
            "{0} {1} {2}, {6} in that {4} {2}",
            "{0} {1} {2}, {6} so that {3} {4} {5}",
            "{0} {1} {2}, {6} in order that {1} {5}",
            "{0} {1} {2}, {6} so as to {3} {4} {5}",
            "{0} {1} {2}, {6} so as not to {4} {2}",
            "{0} {1} {2}, {6} lest {3} {4} {5}",
            "{0} {1} {2}, {6} for fear that {1} {5}",
            "{0} {1} {2}, {6} in case {3} {4} {5}",
            "{0} {1} {2}, {6} in the event that {4} {2}",
            "{0} {1} {2}, {6} to the extent that {3} {4} {5}",
            "{0} {1} {2}, {6} to the degree that {1} {5}",
            "{0} {1} {2}, {6} such that {3} {4} {5}",
            "{0} {1} {2}, {6} in that {4} {2}",
            "{0} {1} {2}, {6} as far as {3} {4} {5}",
            "{0} {1} {2}, {6} as much as {1} {5}",
            "{0} {1} {2}, {6} considering that {3} {4} {5}",
            "{0} {1} {2}, {6} given that {4} {2}",
            "{0} {1} {2}, {6} seeing that {3} {4} {5}",
            "{0} {1} {2}, {6} seeing as {1} {5}",
            "{0} {1} {2}, {6} owing to {3} {4} {5}",
            "{0} {1} {2}, {6} due to {4} {2}",
            "{0} {1} {2}, {6} because of {3} {4} {5}",
            "{0} {1} {2}, {6} on account of {1} {5}",
            "{0} {1} {2}, {6} by reason of {3} {4} {5}"
    };



        string[] pronouns = { "It", "They" };



        int numberOfPhrases = random.Next(minPhrases, maxLength + 1);
        ConcurrentBag<string> sentence = new ConcurrentBag<string>();


        Parallel.For(0, numberOfPhrases, i => {
            //for (int i = 0; i < numberOfPhrases; i++) {


            int subjectIndex = random.Next(subjects.Length);
            string currentSubject = subjects[subjectIndex];

            string currentSubject2 = subjects[random.Next(subjects.Length)];

            string currentObject = subjects[random.Next(objects.Length)];
            string currentObject2 = subjects[random.Next(objects.Length)];

            int subjectGroups = random.Next(1, 3);
            StringBuilder subjectString = new StringBuilder();

            for (int b = 0; b < subjectGroups; b++) {
                if (b > 0) {
                    string theconnector = connectors[random.Next(connectors.Length)];
                    sentence.Append($" {theconnector} ");
                    // Decide whether to use the same subject or a pronoun
                    if (i > 0 && random.NextDouble() < 0.5) { // 50% chance to switch to a pronoun
                        currentSubject = pronouns[random.Next(pronouns.Length)];
                    }

                    if (i > 0 && random.NextDouble() < 0.5) { // 50% chance to switch objects
                        currentObject = subjects[random.Next(objects.Length)];
                    }

                }

                string[] verbs = {
                    "loves", "jumps", "is improving", "is unpredictable", "tastes",
                    "creates", "destroys", "builds", "learns", "teaches",
                    "drives", "flies", "travels", "runs", "walks",
                    "reads", "writes", "paints", "draws", "sings",
                    "plays", "listens", "speaks", "thinks", "believes",
                    "hopes", "fears", "dreams", "dances", "laughs",
                    "cries", "smiles", "frowns", "agrees", "disagrees",
                    "wins", "loses", "competes", "cooperates", "leads",
                    "follows", "invents", "discovers", "explores", "maps",
                    "calculates", "measures", "cuts", "cooks", "bakes",
                    "eats", "drinks", "sleeps", "wakes", "rests",
                    "works", "relaxes", "exercises", "shops", "buys",
                    "sells", "trades", "invests", "saves", "spends",
                    "borrows", "lends", "offers", "receives", "gives",
                    "sends", "receives", "uploads", "downloads", "streams",
                    "surfs", "searches", "finds", "loses", "recovers",
                    "opens", "closes", "starts", "stops", "continues",
                    "pauses", "resumes", "joins", "leaves", "enters",
                    "exits", "rises", "falls", "grows", "shrinks",
                    "changes", "remains", "stays", "moves", "stills"
                };

                string verb = verbs[random.Next(verbs.Length)];
                string verb2 = verbs[random.Next(verbs.Length)];
                string connector = connectors[random.Next(connectors.Length)];

                string phraseTemplate = phraseTemplates[random.Next(phraseTemplates.Length)];

                string phrase = string.Format(phraseTemplate, currentSubject, verb, currentObject, currentSubject2, verb2, currentObject2, connector);



                phrase = $"{char.ToUpper(phrase[0])}{phrase.ToString().Substring(1)}. ";

                subjectString.Append(phrase);
            }

            sentence.Add(subjectString.ToString());
        });

        return string.Join("", sentence);
    }


    protected async Task DeletePosts() {

        using var dbContext = dbContextFactory.CreateDbContext();

        string sqlCommand = $"DELETE FROM Posts;DELETE FROM Groups;DELETE FROM PostGroups;DELETE FROM PostMetadatas;DELETE FROM SocialUsers;DELETE FROM Views;DELETE FROM Votes;";

        // Execute the raw SQL command
        await dbContext.Database.ExecuteSqlRawAsync(sqlCommand);
        message = "Posts Successfully deleted";
        PostCount = dbContext.Posts.Count();
        StateHasChanged();
        dbContext.DisposeAsync();
    }
 
}
