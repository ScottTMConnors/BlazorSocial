@page "/ViewPosts"


@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Microsoft.AspNetCore.Authorization
@using Data
@using Data.Entities;
@using Data.ComponentObjects;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using System.Text.Json



@inject ContentDbContext DbContext

@inject IDbContextFactory<ContentDbContext> dbContextFactory

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="ViewPosts.css" asp-append-version="true" />
<script src="localStorageManager.js" asp-append-version="true"></script>


<head>
    
</head>

<h3>View All Posts</h3>

<Virtualize Context="post" ItemsProvider="@LoadPosts">
    <ItemContent>
        <a href="/post/@post.Id" target="_blank" class="post-card" style="text-decoration:none;color:black;">
            <div>
                <p>@post.AuthorName</p>
                <h3>@post.Title</h3>
                <p>@post.DateString</p>
                <div class="post-card-content">
                    <p>@((MarkupString)post.Content)</p>
                </div>
            </div>
        </a>
    </ItemContent>
</Virtualize>

@code {
    private string privateString = "this string is private";


    //private List<ViewPostObject> postsCache = new List<ViewPostObject>();

    private int dynamicTotalCount = 0;

    private async Task<string> GetCachedPost(string key) {
        return await JSRuntime.InvokeAsync<string>("localStorageManager.getItem", key);
    }

    private async Task SetCachedPost(string key, string value) {
        await JSRuntime.InvokeVoidAsync("localStorageManager.setItem", key, value);
    }

    private async Task RemoveCachedPost(string key) {
        await JSRuntime.InvokeVoidAsync("localStorageManager.removeItem", key);
    }

    private async ValueTask<ItemsProviderResult<ViewPostObject>> LoadPosts(ItemsProviderRequest request) {
        var requiredPosts = new List<ViewPostObject>();

        int endIndex = request.StartIndex + request.Count;
        bool fetchedFromDb = false;

        for (int i = request.StartIndex; i < endIndex; i++) {
            var cachedPostJson = await GetCachedPost($"post_{i}");
            if (!string.IsNullOrEmpty(cachedPostJson)) {
                var post = JsonSerializer.Deserialize<ViewPostObject>(cachedPostJson);
                requiredPosts.Add(post);
            } else {
                // If any post is not found in cache, fetch remaining from DB
                fetchedFromDb = true;
                var newPosts = await LoadPostsFromDb(i, endIndex - i);
                foreach (var post in newPosts) {
                    var postJson = JsonSerializer.Serialize(post);
                    await SetCachedPost($"post_{post.Id}", postJson);
                    requiredPosts.Add(post);
                }
                break;
            }
        }

        if (fetchedFromDb) {
            // Update dynamic total count based on DB fetch
            using var dbContext = dbContextFactory.CreateDbContext();
            dynamicTotalCount = await dbContext.Posts.CountAsync();
        }

        return new ItemsProviderResult<ViewPostObject>(requiredPosts, dynamicTotalCount);
    }

    private async Task<List<ViewPostObject>> LoadPostsFromDb(int startIndex, int count) {
        using var dbContext = dbContextFactory.CreateDbContext();
        var newPosts = await dbContext.Posts
            .OrderByDescending(post => post.PostDate)
            .Skip(startIndex)
            .Take(count)
            .Select(post => new ViewPostObject {
                    Id = post.Id,
                    Title = post.Title,
                    Content = post.Content.Substring(0, 1000),
                    PostDate = post.PostDate,
                    DateString = ConvertDateToString(post.PostDate),
                    Upvotes = post.Upvotes,
                    Downvotes = post.Downvotes,
                    AuthorID = post.AuthorID,
                    AuthorName = "",
                    ViewCount = post.ViewCount
                })
            .ToListAsync();
        return newPosts;
    }

    public static string ConvertDateToString(DateTime? date) {
        if (!date.HasValue) {
            return "Invalid date";
        }

        TimeSpan difference = DateTime.Now - date.Value;

        if (difference.TotalDays >= 1) {
            return date.Value.ToString();
        } else if (difference.TotalHours >= 1) {
            return $"{(int)difference.TotalHours}h";
        } else if (difference.TotalMinutes >= 1) {
            return $"{(int)difference.TotalMinutes}m";
        } else {
            return $"{(int)difference.TotalSeconds}s";
        }
    }

}

